---
author: Lucas Yuji ( @ujizin )
pubDatetime: 2024-12-22T00:00:00.000Z
modDatetime: 2024-12-22T00:00:00.000Z
title: Dev Mobile: Onde Vivem, o Que Comem?
slug: devmobile-intro
featured: false
draft: false
tags:
 - Mobile
 - Android
 - iOS
 - crossplatform
 - javascript
 - hybrid
description: O que sabemos sobre esses profissionais? Onde eles vivem? O que eles comem?
---

# Dev Mobile: Onde Vivem, o Que Comem?

Quando falamos de desenvolvedores Front-End ou Back-End, é fácil lembrar de stacks conhecidas, referências da área, canais de tutoriais e muito mais. Mas, e quando o assunto é desenvolvimento mobile? O que sabemos sobre esses profissionais? Onde eles vivem? O que eles comem?

Brincadeiras à parte, eu sou o Lucas Yuji, sou desenvolvedor Android (nativo), e decidi escrever este artigo para compartilhar um pouco da minha experiência e explorar o universo do desenvolvimento mobile. Afinal, será que essa área é tão promissora quanto as outras? Se você tem curiosidade ou quer aprender mais, continue lendo :)

## O Mundo do Desenvolvimento Mobile

O desenvolvimento mobile é tão vasto quanto outras áreas da tecnologia. Ele conta com uma ampla variedade de frameworks, plataformas e ferramentas para ajudar no processo de criação. Entre as opções mais conhecidas estão:

- **Nativo**: Utilizando Kotlin para Android ou Swift para iOS.
- **React Native**: Um framework cross-platform que usa JavaScript.
- **Flutter**: Cross-platform, baseado em Dart, mantido pelo Google.
- **Ionic**: Uma ferramenta híbrida que utiliza WebView para renderizar sua interface, desenvolvida com HTML, CSS e JavaScript/TypeScript.

Com tantas opções, é comum se perguntar: qual é a melhor? Qual escolher? 

Se tu busca uma resposta definitiva, sinto dizer que ela não existe. Não há uma “bala de prata”. Cada uma tem suas vantagens e desvantagens, e a escolha depende do contexto. Vamos explorar brevemente cada uma.

## Desenvolvimento Nativo (Android & iOS)

O desenvolvimento nativo, embora limitado a uma única plataforma por vez, destaca-se por estar sempre alinhado às últimas inovações. Ele oferece desempenho impecável e alta escalabilidade, sendo a escolha de muitas big techs e startups em crescimento. Vale lembrar que, além de Kotlin e Swift, o Objective-C ainda é relevante em muitos projetos legados de iOS e Java para projetos legados de Android.

### Vantagens:
- Sempre atualizado com as últimas features da sua plataforma
- Alta performance
- Escalabilidade
- Ideal para grandes empresas.

### Desvantagens:
- Restrito a uma única plataforma por vez (Android ou iOS).
- Alto custo, já que empresas precisam investir em desenvolvedores para ambas as plataformas.
- Curva de aprendizado mais longa, devido a uma comunidade menor em comparação com outras opções.

## Cross-Platforms (React Native & Flutter)

Os frameworks cross-platform são populares por sua produtividade, desempenho satisfatório e curva de aprendizado acessível. E também, o React Native, por exemplo, tem grande sinergia com frameworks front-end como React, então processo de aprendizagem costuma ser menor para devs que já sabem tal framework

### Vantagens:
- Alta produtividade
- Forte apoio da comunidade
- Boa escolha para pequenas e médias empresas

### Desvantagens:
- Nem sempre acompanham as últimas funcionalidades de Android e iOS, o que pode ser um problema para grandes empresas.

## Híbrido (Ionic)

O Ionic foi uma das primeiras ferramentas (senão a primeira) criada para desenvolver aplicativos para Android e iOS simultaneamente. Apesar de rápido e simples de usar, sua limitação no acesso a funcionalidades nativas e o uso de webviews para renderização impactam desempenho e escalabilidade.

### Vantagens:
- Desenvolvimento rápido e fácil de ser feito
- Pode ser uma boa escolha para freelances, especialmente aqueles vindos do front-end
- Curva de aprendizado baixa

### Desvantagens:
- Desempenho limitado
- Baixa escalabilidade
- Dificuldade do framework em acompanhar as últimas inovações das plataformas.
- Integração limitada com APIs nativas.
- Migração da comunidade para cross-platforms, como React Native 

## **Conclusão**

Como desenvolvedor Android nativo, vejo que cada tecnologia tem seu lugar e pode se encaixar de forma estratégica dependendo do projeto ou da empresa. O importante é explorar, testar e encontrar a solução que faça sentido para você e para os objetivos do seu trabalho.

Seja qual for sua escolha, o universo mobile está em constante crescimento e cheio de oportunidades. Não há um único caminho de "pedra": eu mesmo comecei como desenvolvedor front-end, explorei Flutter, e hoje foco no desenvolvimento nativo Android. O importante é estar aberto a aprender e encontrar o que melhor se adapta às suas necessidades e objetivos :)
